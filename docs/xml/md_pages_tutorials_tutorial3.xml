<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="md_pages_tutorials_tutorial3" kind="page">
    <compoundname>md_pages_tutorials_tutorial3</compoundname>
    <title>Tutorial: Default Galerkin with explicit time stepping</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para> <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-block m-info" /></para>
<para><simplesect kind="par"><title></title><para>This tutorial shows how to create and solve a <emphasis>default</emphasis> time-explicit Galerkin problem.</para>
</simplesect>
</para>
<sect1 id="md_pages_tutorials_tutorial3_1autotoc_md69">
<title>What is a default Galerkin problem?</title>
<para>pressio4py supports different variants of Galerkin, as we will show in subsequent tutorials. The &quot;default&quot; qualification in pressio4py refers to a formulation that does <emphasis>not</emphasis> use hyper-reduction. Suppose that your full-order model (FOM) is written as <formula id="8">\[ \frac{d \boldsymbol{y}}{dt} = \boldsymbol{f}(\boldsymbol{y},t; \boldsymbol{\mu}), \quad \boldsymbol{y}(0;\boldsymbol{\mu}) = \boldsymbol{y}(\boldsymbol{\mu}), \]</formula></para>
<para>where <formula id="29">$y$</formula> is the FOM state and <formula id="30">$f(...)$</formula> is the FOM velocity. Note that here both <formula id="29">$y$</formula> and <formula id="31">$f$</formula> are large, see figure below. <image type="html" name="tut_gal_1_f1.png" width="30%"></image>
</para>
<para>pressio4py defines a <emphasis>default Galerkin</emphasis> problem to be <formula id="32">\[ \dot{\hat{\mathbf{y}}}(t;\mathbf{\mu}) = \mathbf{\phi}^T \mathbf{f} \Big(\mathbf{y}_{ref}(\mathbf{\mu}) + \mathbf{\phi}\hat{\mathbf{y}} \Big) \]</formula></para>
<para>where <formula id="33">$\hat{y}$</formula> is the reduced state, also called generalized coordinates, <formula id="29">$y$</formula> is the full-order model (FOM) state, <formula id="34">$y_{ref}$</formula> is a reference FOM state, <formula id="19">$\phi$</formula> is the orthonormal basis, and <formula id="30">$f(...)$</formula> is the FOM velocity. <image type="html" name="tut_gal_1_f2.png" width="65%"></image>
</para>
</sect1>
<sect1 id="md_pages_tutorials_tutorial3_1autotoc_md70">
<title>How to create a default Galerkin problem?</title>
<para>Here we focus on explicit time integration, leaving the implicit one for a different tutorial. To create a Galerkin problem, one needs:<orderedlist>
<listitem><para>a FOM object satisfying the API described <ulink url="file:///Users/fnrizzi/Desktop/work/ROM/gitrepos/pressio4py/docs/html/md_pages_prepare_your_app.html">here</ulink>;</para>
</listitem><listitem><para>a linear decoder object (see <ulink url="./md_pages_tutorials_tutorial1.html">this tutorial</ulink>);</para>
</listitem><listitem><para>a rom state</para>
</listitem><listitem><para>a FOM reference state</para>
</listitem></orderedlist>
</para>
<para>Synopsis:</para>
<para><programlisting filename=".py"><codeline><highlight class="normal">problem<sp/>=<sp/>rom.galerkin.default.ProblemForwardEuler(fomObj,<sp/>decoder,<sp/>yRom,<sp/>yRef)</highlight></codeline>
</programlisting></para>
<para>Here we highlight that the problem class is within the <computeroutput>default</computeroutput> module and how the time-stepping scheme is part of the class name. This stems from the fact that the Python bindings are built from the C++ library, which is heavy on templates, thus leading to this solution.</para>
<para>To use a different time stepping scheme, one can simply change the last part of the class name. We currently support forward Euler and 4th-order Runge Kutta. For RK4, one would do:</para>
<para><programlisting filename=".py"><codeline><highlight class="normal">problem<sp/>=<sp/>rom.galerkin.default.ProblemRK4(fomObj,<sp/>decoder,<sp/>yRom,<sp/>yRef)</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_pages_tutorials_tutorial3_1autotoc_md71">
<title>How to solve a default Galerkin problem?</title>
<para>Once the problem object is created, one needs to integrate in time the reduced system. Synopsis:</para>
<para><programlisting filename=".py"><codeline><highlight class="normal">rom.galerkin.advanceNSteps(problem,<sp/>yRom,<sp/>t0,<sp/>dt,<sp/>Nsteps<sp/>[,<sp/>observer])</highlight></codeline>
</programlisting> </para>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
