<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="md_pages_tutorials_tutorial3" kind="page">
    <compoundname>md_pages_tutorials_tutorial3</compoundname>
    <title>Tutorial: Default Galerkin with explicit time stepping</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para> <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-block m-info" /></para>
<para><simplesect kind="par"><title></title><para>This tutorial shows how to create and solve a <emphasis>default</emphasis> time-explicit Galerkin problem.</para>
</simplesect>
</para>
<sect1 id="md_pages_tutorials_tutorial3_1autotoc_md69">
<title>What is a default Galerkin problem?</title>
<para>pressio4py supports different variants of Galerkin, as we will show in subsequent tutorials. The &quot;default&quot; qualification in pressio4py refers to a formulation that does <emphasis>not</emphasis> use hyper-reduction. Suppose that your full-order model (FOM) is written as <formula id="8">\[ \frac{d \boldsymbol{y}}{dt} = \boldsymbol{f}(\boldsymbol{y},t; \boldsymbol{\mu}), \quad \boldsymbol{y}(0;\boldsymbol{\mu}) = \boldsymbol{y}(\boldsymbol{\mu}), \]</formula></para>
<para>where <formula id="29">$y$</formula> is the FOM state and <formula id="30">$f(...)$</formula> is the FOM velocity. Both <formula id="29">$y$</formula> and <formula id="31">$f$</formula> are large, see figure below. <image type="html" name="tut_gal_1_f1.png" width="30%"></image>
</para>
<para> <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-block m-info" /></para>
<para><simplesect kind="par"><title>Default Galerkin</title><para>pressio4py defines a <emphasis>default Galerkin</emphasis> problem as: <formula id="32">\[ \dot{\hat{\mathbf{y}}}(t;\mathbf{\mu}) = \mathbf{\phi}^T \mathbf{f} \Big(\mathbf{y}_{ref}(\mathbf{\mu}) + \mathbf{\phi}\hat{\mathbf{y}} \Big) \]</formula></para>
</simplesect>
where <formula id="33">$\hat{y}$</formula> is the reduced state, also called generalized coordinates, <formula id="29">$y$</formula> is the full-order model (FOM) state, <formula id="34">$y_{ref}$</formula> is a reference FOM state, <formula id="19">$\phi$</formula> is the orthonormal basis, and <formula id="30">$f(...)$</formula> is the FOM velocity. Schematically, this system corresponds to the figure below. <image type="html" name="tut_gal_1_f2.png" width="65%"></image>
</para>
</sect1>
<sect1 id="md_pages_tutorials_tutorial3_1autotoc_md70">
<title>How to create a default Galerkin problem?</title>
<para>To create a default Galerkin problem object, one needs:<orderedlist>
<listitem><para>a FOM object satisfying the API described <ulink url="file:///Users/fnrizzi/Desktop/work/ROM/gitrepos/pressio4py/docs/html/md_pages_prepare_your_app.html">here</ulink></para>
</listitem><listitem><para>a linear decoder (see <ulink url="./md_pages_tutorials_tutorial1.html">this tutorial</ulink>)</para>
</listitem><listitem><para>a rom state</para>
</listitem><listitem><para>a FOM reference state</para>
</listitem></orderedlist>
</para>
<para>The synopsis is as follows:</para>
<para><programlisting filename=".py"><codeline><highlight class="normal">problem<sp/>=<sp/>rom.galerkin.default.ProblemForwardEuler(fomObj,<sp/>decoder,<sp/>yRom,<sp/>yRef)</highlight></codeline>
</programlisting></para>
<para>Here we highlight that the problem class is within the <computeroutput>default</computeroutput> module and that the time stepping scheme is part of the class name. This stems from the fact that the Python bindings are built from the C++ library, which is heavy on templates, thus leading to this solution.</para>
<para>To select a different time stepping scheme, one can change the last part of the class name. We currently support forward Euler and 4th-order Runge Kutta, and are adding several others. The doc will be updated as we make progress. For RK4, one would do:</para>
<para><programlisting filename=".py"><codeline><highlight class="normal">problem<sp/>=<sp/>rom.galerkin.default.ProblemRK4(fomObj,<sp/>decoder,<sp/>yRom,<sp/>yRef)</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_pages_tutorials_tutorial3_1autotoc_md71">
<title>How to solve a default Galerkin problem?</title>
<para>Once the target problem object is created, the reduced system can be integrated in time. Here we provide the most basic function to do so, which advances the system for a fixed number of steps. Synopsis:</para>
<para><programlisting filename=".py"><codeline><highlight class="normal">rom.galerkin.advanceNSteps(problem,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>problem<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yRom,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>rom<sp/>state<sp/>to<sp/>advance</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>initial<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dt,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>time<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Nsteps<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>number<sp/>of<sp/>steps</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[,<sp/>observer]<sp/></highlight><highlight class="comment">#<sp/>optional<sp/>observer<sp/>(see<sp/>below)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
</programlisting></para>
<para>The optional argument allows one to pass an &quot;observer&quot; object whose purpose is to monitor the evolution of the reduced state. The observer is called back by pressio4py during the time integration at every time step. This can be useful to, e.g., save the generalized coordinates, or usign them to perfom some other operation.</para>
<para>The observer class must meee the following API: <programlisting filename=".py"><codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">OdeObserver:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self):<sp/></highlight><highlight class="keyword">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__call__(self,<sp/>timeStep,<sp/>time,<sp/>romState):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>do<sp/>what<sp/>you<sp/>want<sp/>with<sp/>romState</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_pages_tutorials_tutorial3_1autotoc_md72">
<title>Want to see all the above pieces in action?</title>
<para>Look at <ulink url="./md_pages_demos_demo1.html">this demo</ulink> that uses default Galerkin for a 1d PDE.</para>
</sect1>
<sect1 id="md_pages_tutorials_tutorial3_1autotoc_md73">
<title>Some considerations</title>
<para> <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-block m-warning" /></para>
<para><simplesect kind="par"><title></title><para>One might wonder how the above formulation can be efficient, given that the right-hand side of the reduced system scales with the FOM degrees of freedom. This is true: the reduced system obtained from a <emphasis>default</emphasis> problem reduces the spatial degrees of freedom, but is typically not efficient because at every evaluation of the RHS, it requires a large matrix vector product. Thus, a default Galerkin is typically used for exploratory analysis when computational efficiency is <bold>not</bold> a primary goal, e.g. to test the feasibility of ROMs for a target problem, or try different basis. When computational efficiency is critical, one needs to resort to hyper-reduction techniques to reduce the cost of the matrix-vector product. This is covered in subsequent tutorials. </para>
</simplesect>
</para>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
