<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="md_pages_components_rom_lspg_steady" kind="page">
    <compoundname>md_pages_components_rom_lspg_steady</compoundname>
    <title>rom: Steady LSPG</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para> <mcss:span xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-text m-danger">todo</mcss:span>: write this better</para>
<para>The pressio4py steady LSPG ROMs are designed to involve two main steps:</para>
<sect1 id="md_pages_components_rom_lspg_steady_1autotoc_md98">
<title>1. Create</title>
<para>You instantiate a &quot;steady LSPG problem&quot;, e.g.:<linebreak/>
</para>
<para><programlisting filename=".py"><codeline><highlight class="normal">problem<sp/>=<sp/>pressio4py.rom.lspg.steady.Problem(...)</highlight></codeline>
</programlisting></para>
<para>We currently support two variants:<itemizedlist>
<listitem><para>Basic Problem: <ulink url="md_pages_components_rom_lspg_default_steady.html">link</ulink></para>
</listitem><listitem><para>Masked: <ulink url="md_pages_components_rom_lspg_masked_steady.html">link</ulink></para>
</listitem></itemizedlist>
</para>
<para>Refer to each problem page for details on each specific variant.</para>
<para>The returned <computeroutput>problem</computeroutput> object is an instantiation of a class exposing the following interface:</para>
<para><programlisting filename=".py"><codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">Problem</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">fomStateReconstructor()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/></highlight><highlight class="comment">#<sp/>reference<sp/>to<sp/>object<sp/>for<sp/>reconstructing<sp/>FOM<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>def<sp/>createResidual()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">#<sp/>a<sp/>residual<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">createJacobian()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/></highlight><highlight class="comment">#<sp/>a<sp/>Jacobian<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>def<sp/>residual(state,<sp/>R)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>evaluates<sp/>the<sp/>residual<sp/>for<sp/>the<sp/>given<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">jacobian(state,<sp/>J)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>evaluates<sp/>the<sp/>Jacobian<sp/>for<sp/>the<sp/>given<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_pages_components_rom_lspg_steady_1autotoc_md99">
<title>2. Solve</title>
<para><itemizedlist>
<listitem><para>you use a nonlinear least-squares solvers to solve the problem <programlisting filename=".py"><codeline><highlight class="normal">solver<sp/>=<sp/>pressio4py.solvers.create_gauss_newton(problem,<sp/>...)</highlight></codeline>
<codeline><highlight class="normal">solver.solve(problem,<sp/>...)</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>note, in fact, that the problem&apos;s API conforms to the one required by the nonlinear solvers</para>
</listitem><listitem><para>for this solve stage, you don&apos;t have to use the pressio4py solvers. Once you have the problem object, you can also use your own nonlinear least-squares solver. As shown above, the <computeroutput>problem</computeroutput> exposes all the operators that you need to solve.</para>
</listitem></itemizedlist>
</para>
<para><linebreak/>
 <hruler/>
 <linebreak/>
 </para>
</sect1>
    </detaileddescription>
    <location file="pages/components/rom_lspg_steady.md"/>
  </compounddef>
</doxygen>
