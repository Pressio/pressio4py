<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="md_pages_components_rom_lspg_hypred" kind="page">
    <compoundname>md_pages_components_rom_lspg_hypred</compoundname>
    <title>rom: LSPG: unsteady hyper-reduced problem</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para> <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-note m-default" /></para>
<para><parblock><para>Defined in module: <computeroutput>pressio4py.rom.lspg.unsteady</computeroutput></para>
<para>Import as: <emsp/> <emsp/> <emsp/> <computeroutput>from pressio4py.rom import lspg</computeroutput> </para>
</parblock></para>
<sect1 id="md_pages_components_rom_lspg_hypred_1autotoc_md85">
<title>API, Parameters and Requirements</title>
<para><programlisting filename=".py"><codeline><highlight class="normal">problem<sp/>=<sp/>lspg.unsteady.HypredProblem(scheme,<sp/>fom_adapter,<sp/>decoder,<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rom_state,<sp/>fom_ref_state,<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sampleToStencilIndexing)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">problem<sp/>=<sp/>lspg.unsteady.PrecHypredProblem(scheme,<sp/>fom_adapter,<sp/>decoder,<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rom_state,<sp/>fom_ref_state,<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sampleToStencilIndexing,<sp/>preconditioner)</highlight></codeline>
</programlisting></para>
<para><itemizedlist>
<listitem><para><computeroutput>scheme</computeroutput>:<itemizedlist>
<listitem><para>value from the <computeroutput>ode.stepscheme</computeroutput> enum setting the desired stepping scheme</para>
</listitem><listitem><para>requires an <ulink url="md_pages_components_ode_steppers_implicit.html">implicit value</ulink></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>fom_adapter</computeroutput>:<itemizedlist>
<listitem><para>instance of your adapter class specifying the FOM problem. <linebreak/>
</para>
</listitem><listitem><para>must be admissible to unsteady LSPG, see <ulink url="./md_pages_components_rom_fom_apis.html">API list</ulink></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>decoder</computeroutput>:<itemizedlist>
<listitem><para>decoder object</para>
</listitem><listitem><para>must satify the requirements listed <ulink url="md_pages_components_rom_decoder.html">here</ulink></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>rom_state</computeroutput>:<itemizedlist>
<listitem><para>currently, must be a rank-1 <computeroutput>numpy.array</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>fom_ref_state</computeroutput>:<itemizedlist>
<listitem><para>your FOM reference state that is used when reconstructing the FOM state</para>
</listitem><listitem><para>must be a rank-1 <computeroutput>numpy.array</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>stencilToSampleIndexing</computeroutput>:<itemizedlist>
<listitem><para>an object that knows the mapping from sample to stancil operators</para>
</listitem><listitem><para>can be constructed as: <linebreak/>
 <programlisting filename=".py"><codeline><highlight class="normal">mapper<sp/>=<sp/>rom.lspg.unsteady.StencilToSampleIndexing(list_of_ints)</highlight></codeline>
</programlisting> <nonbreakablespace/></para>
</listitem><listitem><para>see section below for more details</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>preconditioner</computeroutput>:<itemizedlist>
<listitem><para>functor needed to precondition the ROM operators</para>
</listitem><listitem><para>must be a functor with a specific API: <programlisting filename=".py"><codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">Prec:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__call__(self,<sp/>fom_state,<sp/>time,<sp/>operand):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>given<sp/>the<sp/>current<sp/>FOM<sp/>state,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>apply<sp/>your<sp/>preconditioner<sp/>to<sp/>the<sp/>operand.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Ensure<sp/>that<sp/>you<sp/>overwrite<sp/>the<sp/>data<sp/>in<sp/>the<sp/>operand.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>As<sp/>an<sp/>example,<sp/>a<sp/>trivial<sp/>preconditioner<sp/>that<sp/>does<sp/>nothing:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>operand[:]<sp/>*=<sp/>1.</highlight></codeline>
</programlisting> <linebreak/>
</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md_pages_components_rom_lspg_hypred_1autotoc_md86">
<title>Stencil to sample indexing</title>
<para>When working with a hyper-reduced problem, pressio4py has to manipulate objects that have different sizes/distributions. For such problem, in fact, some operators are naturally defined on the what we refer to as &quot;sample mesh&quot; while some are defined on what we call the &quot;stencil mesh&quot;.</para>
<para>As explained <ulink url="https://pressio.github.io/algos/hyper/">here</ulink>, recall that:</para>
<para><orderedlist>
<listitem><para><bold>sample mesh</bold>: a disjoint collection of elements where the velocity (or residual) operator is computed.</para>
</listitem><listitem><para><bold>stencil mesh</bold>: the set of all nodes or elements needed to compute the velocity or residual on the sample mesh.</para>
</listitem><listitem><para>Typically, the sample mesh is a subset of the stencil mesh.</para>
</listitem></orderedlist>
</para>
<para> <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-note m-info" /></para>
<para><parblock><para>The sample to stencil indexing is a list of indices that you need to provide such that pressio4py knows how to properly combine operands defined on stencil and sample mesh. </para>
</parblock></para>
<sect2 id="md_pages_components_rom_lspg_hypred_1autotoc_md87">
<title>Explain it to me better!</title>
<para>Suppose that your FOM problem involves a 2D problem and that your FOM numerical method needs at every cell information from the nearest neighbors. For the sake of explanation, <emphasis>it does not matter what problem we are solving</emphasis>, only what we just said. Now, suppose that you want to try hyper-reduced LSPG on it. You come up with a sample and stencil mesh for your problem (read <ulink url="https://pressio.github.io/algos/hyper/">this page</ulink> for some information about how to select sample mesh cells), and let&apos;s say it looks like this: <image type="html" name="lspg_sample_mesh1.png" width="400px"></image>
</para>
<para>The stencil mesh is the set of <emphasis>all</emphasis> cells shown, while the sample mesh is the <emphasis>subset</emphasis> color-coded yellow. We have added an arbitrary enumeration scheme to uniquely assign a global index to each cell. The enumeration order does not matter, this is just for demonstration purposes. You have an adapter class for your problem that is able to compute the FOM right-hand-side <formula id="4">$f$</formula> on the yellow cells, for a given FOM state <formula id="3">$y$</formula> on the stencil mesh.</para>
<para>For this example, you then would do this:</para>
<para><programlisting filename=".py"><codeline><highlight class="comment">#<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">mylist<sp/>=<sp/>[1,4,9,14,18,24,25,31,37,40,47,50,53,62,65,70]</highlight></codeline>
<codeline><highlight class="normal">indexing<sp/>=<sp/>rom.lspg.unsteady.StencilToSampleIndexing(mylist)</highlight></codeline>
<codeline><highlight class="normal">scheme<sp/>=<sp/>ode.stepscheme.BDF1</highlight></codeline>
<codeline><highlight class="normal">lspgProblem<sp/>=<sp/>rom.lspg.unsteady.HypredProblem(...,<sp/>indexing)</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>...</highlight></codeline>
</programlisting></para>
<para> <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-block m-info" /></para>
<para><simplesect kind="par"><title>Note that:</title><para><itemizedlist>
<listitem><para>how you enumerate the cells does not matter. You are free to do whatever you want, as long as your adapter object is consistent with the chosen enumeration scheme and handles things accordingly.</para>
</listitem><listitem><para>This indexing notion seamlessly extends to 1D and 3D problems. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
</sect2>
</sect1>
    </detaileddescription>
    <location file="pages/components/rom_lspg_hypred.md"/>
  </compounddef>
</doxygen>
