<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="md_pages_tutorials_tutorial1" kind="page">
    <compoundname>md_pages_tutorials_tutorial1</compoundname>
    <title>Tutorial: Linear Decoder</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para> <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-block m-info" /></para>
<para><simplesect kind="par"><title>Content</title><para>This tutorial shows how to create a linear decoder in pressio4py.</para>
</simplesect>
</para>
<sect1 id="md_pages_tutorials_tutorial1_1autotoc_md62">
<title>Context</title>
<para>A key assumption of projection-based ROMs relies on approximating a full-order model (FOM) state, <formula id="14">$y_{fom}$</formula>, as: <formula id="15">\[ y_{fom} = g(y_{rom}) \]</formula></para>
<para>where <formula id="16">$y_{rom}$</formula> is the reduced state, also called generalized coordinates, and <formula id="17">$g$</formula> is the mapping between the two. If <formula id="17">$g$</formula> is linear, then we can write: <formula id="18">\[ y_{fom} = \phi y_{rom} \]</formula> where <formula id="19">$\phi$</formula> is a matrix (for the time being, assume it constant). A linear decoder in pressio4py implements this linear mapping. Due to the linearity, the Jacobian of the mapping is: <formula id="20">\[ \frac{d y_{fom}}{d y_{rom}} = \phi. \]</formula></para>
</sect1>
<sect1 id="md_pages_tutorials_tutorial1_1autotoc_md63">
<title>Code</title>
<para>Here we demonstate how to create a linear decoder. The full tutorial can be found <ulink url="https://github.com/Pressio/pressio4py/blob/master/tutorials/tut_linear_decoder/main.py">here</ulink></para>
<para><programlisting filename=".py"><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;__main__&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/>A<sp/>linear<sp/>decoder<sp/>(or<sp/>mapping)<sp/>represents</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>phi<sp/>*<sp/>x</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/>where<sp/>phi<sp/>is<sp/>the<sp/>mapping&apos;s<sp/>Jacobian<sp/>(assumed<sp/>constant<sp/>for<sp/>now).</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/>This<sp/>is<sp/>a<sp/>typical<sp/>approximation<sp/>adopted<sp/>in<sp/>projection-based<sp/>ROMs,</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/>where<sp/>&quot;x&quot;<sp/>is<sp/>referred<sp/>to<sp/>as<sp/>the<sp/>generalized<sp/>coordinates<sp/>(or<sp/>latent<sp/>space)</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/>and<sp/>&quot;y&quot;<sp/>represents<sp/>an<sp/>approximation<sp/>of<sp/>the<sp/>FOM<sp/>state.</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/>This<sp/>tutorial<sp/>shows<sp/>how<sp/>to<sp/>create<sp/>a<sp/>linear<sp/>decoder/mapper<sp/>in<sp/>pressio4py.</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/>For<sp/>examples<sp/>using<sp/>it,<sp/>see<sp/>subsequent<sp/>tutorials.</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/>&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>create<sp/>the<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>attention:<sp/>we<sp/>declare<sp/>phi<sp/>to<sp/>be<sp/>column-major<sp/>for<sp/>these<sp/>reasons:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>1.<sp/>pressio4py<sp/>uses<sp/>blas<sp/>(wherever<sp/>possible)<sp/>to<sp/>operate<sp/>on<sp/>numpy<sp/>arrays,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>so<sp/>a<sp/>column-major<sp/>layout<sp/>implies<sp/>seamless<sp/>compatiblity<sp/>with<sp/>blas</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>2.<sp/>when<sp/>using<sp/>column-major<sp/>layout,<sp/>pressio4py<sp/>references<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>matrix<sp/>phi<sp/>without<sp/>doing<sp/>a<sp/>deep<sp/>copy,<sp/>which<sp/>saves<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>since<sp/>a<sp/>single<sp/>jacobian<sp/>matrix<sp/>is<sp/>alive.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>phi<sp/>=<sp/>np.ones((10,3),<sp/>order=</highlight><highlight class="stringliteral">&apos;F&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>to<sp/>create<sp/>the<sp/>linear<sp/>decoder,<sp/>one<sp/>can<sp/>simply<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>linearDecoder<sp/>=<sp/>rom.Decoder(phi)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>linearDecoder<sp/>exposes<sp/>a<sp/>method<sp/>to<sp/>evaluate<sp/>the<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>y,x<sp/>=<sp/>np.zeros(10),<sp/>np.ones(3)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>linearDecoder.applyMapping(x,<sp/>y)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>print(y)</highlight></codeline>
</programlisting></para>
<para> <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-block m-warning" /></para>
<para><simplesect kind="par"><title>Where can you use the linear decoder?</title><para>A linear decoder can be used for both Galerkin and LSPG as will be shown in subsequent tutorials and in the demos. </para>
</simplesect>
</para>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
