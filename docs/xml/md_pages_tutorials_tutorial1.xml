<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="md_pages_tutorials_tutorial1" kind="page">
    <compoundname>md_pages_tutorials_tutorial1</compoundname>
    <title>Tutorial: Linear Decoder</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A key assumption of projection-based ROMs relies on approximating a full-order model (FOM) state, <formula id="14">$y_{fom}$</formula>, as: <formula id="15">\[ y_{fom} = g(y_{rom}) \]</formula></para>
<para>where <formula id="16">$y_{rom}$</formula> is the reduced state, also called generalized coordinates, and <formula id="17">$g$</formula> is the mapping between the two.</para>
<para>If <formula id="17">$g$</formula> is linear, then we can write: <formula id="18">\[ y_{fom} = \phi y_{rom} \]</formula> where <formula id="19">$\phi$</formula> is a matrix (for the time being assumed constant). The Jacobian of the mapping is: <formula id="20">\[ \frac{d y_{fom}}{d y_{rom}} = \phi. \]</formula></para>
<para>A linear decoder in pressio4py represents this linear mapping.</para>
<para>Note that the above expressions are abtract, since they do not specify what kind of data structures are used. pressio4py supports two scenarios:<orderedlist>
<listitem><para>the FOM and ROM states are <emphasis>rank-1 tensors</emphasis> (i.e., vectors)</para>
</listitem><listitem><para>the FOM and ROM states are <emphasis>rank-2 tensors</emphasis> (i.e., matrices)</para>
</listitem></orderedlist>
</para>
<sect1 id="md_pages_tutorials_tutorial1_1autotoc_md62">
<title>Rank-1 state</title>
<para>The full tutorial can be found <ulink url="https://github.com/Pressio/pressio4py/blob/master/tutorials/tut_linear_decoder/main.py">here</ulink>.</para>
<para>The FOM state is stored as an array, <formula id="21">$y_{fom} \in R^N$</formula>, where <formula id="22">$N$</formula> = <bold>total number of degrees of freedom</bold>. In this case, the application possibly involves multiple fields (e.g., density, chemical species, etc), but stores all the spatial degrees of freedom in a single array. For example, in a finite-volume code, one stores contiguously all field values of a given cell, for all cells. This is common, for example, when the application needs to do implicit time-integration such that a large system needed to be solved.</para>
<para><programlisting filename=".py"><codeline><highlight class="keyword">from</highlight><highlight class="normal"><sp/>pressio4py<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>rom<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>rom</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;__main__&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>create<sp/>the<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>attention:<sp/>we<sp/>declare<sp/>phi<sp/>to<sp/>be<sp/>column-major<sp/>for<sp/>these<sp/>reasons:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>1.<sp/>pressio4py<sp/>uses<sp/>blas<sp/>(wherever<sp/>possible)<sp/>to<sp/>operate<sp/>on<sp/>numpy<sp/>arrays,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>so<sp/>a<sp/>column-major<sp/>layout<sp/>implies<sp/>seamless<sp/>compatiblity<sp/>with<sp/>blas</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>2.<sp/>when<sp/>using<sp/>column-major<sp/>layout,<sp/>pressio4py<sp/>references<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>matrix<sp/>phi<sp/>without<sp/>doing<sp/>a<sp/>deep<sp/>copy,<sp/>which<sp/>saves<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>since<sp/>a<sp/>single<sp/>jacobian<sp/>matrix<sp/>is<sp/>alive.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>phi<sp/>=<sp/>np.ones((10,3),<sp/>order=</highlight><highlight class="stringliteral">&apos;F&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>to<sp/>create<sp/>the<sp/>linear<sp/>decoder,<sp/>one<sp/>can<sp/>simply<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>linearDecoder<sp/>=<sp/>rom.Decoder(phi)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>linearDecoder<sp/>exposes<sp/>a<sp/>method<sp/>to<sp/>evaluate<sp/>the<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>fomState,<sp/>romState<sp/>=<sp/>np.zeros(10),<sp/>np.ones(3)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>linearDecoder.applyMapping(romState,<sp/>fomState)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>print(y)</highlight></codeline>
</programlisting></para>
<para> <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-block m-warning" /></para>
<para><simplesect kind="par"><title>Where can you use the linear decoder with a rank-1 state?</title><para>It can be employed for both Galerkin and LSPG as shown in subsequent tutorials and in the demos.</para>
</simplesect>
</para>
</sect1>
<sect1 id="md_pages_tutorials_tutorial1_1autotoc_md63">
<title>Rank-2 state</title>
<para>The full tutorial can be found <ulink url="https://github.com/Pressio/pressio4py/blob/master/tutorials/tut_linear_decoder/main.py">here</ulink>.</para>
<para>In this case, the FOM state is stored as a matrix, <formula id="23">$y_{fom} \in R^{N,m}$</formula>, where:<itemizedlist>
<listitem><para><formula id="24">$m$</formula> = the total number of fields. E.g., density, x-velocity, tracer concentration, etc.</para>
</listitem><listitem><para><formula id="22">$N$</formula> = number of degrees of freedom of each field</para>
</listitem></itemizedlist>
</para>
<para>This scenario is intended for applications that prefer to separate the degress of freedom, and is more commonly found for explicit time integration.</para>
<para> <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-block m-warning" /></para>
<para><simplesect kind="par"><title>Where can you use the linear decoder with a rank-1 state?</title><para>It can be employed for both Galerkin and LSPG as shown in subsequent tutorials and in the demos. </para>
</simplesect>
</para>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
