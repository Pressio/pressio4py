<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="md_pages_tutorials_tutorial4" kind="page">
    <compoundname>md_pages_tutorials_tutorial4</compoundname>
    <title>Tutorial: Masked Galerkin with explicit time stepping</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para> <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-block m-info" /></para>
<para><simplesect kind="par"><title></title><para>This tutorial shows how to create and solve a <emphasis>masked</emphasis> time-explicit Galerkin problem.</para>
</simplesect>
</para>
<sect1 id="md_pages_tutorials_tutorial4_1autotoc_md75">
<title>What is a masked Galerkin problem?</title>
<para>In <ulink url="./md_pages_tutorials_tutorial3.html">this previous tutorial</ulink> we introduced the <emphasis>default Galerkin problem</emphasis> and explained that it is inefficient for large systems because, at every time step, one has to compute the FOM velocity and project it using the basis matrix, both of which scale with the FOM degrees of freedom. This implies that even if the reduced system to integrate in time is much smaller, the computational gains are practically zero becuase of the above bottleneck.</para>
<para>To overcome this obstacle, one can rely on hyper-reduction techniques: hyper-reduction aims at approximating the FOM nonlinear operators for a fraction of the computational cost. There are several hyper-reduction methods available (todo, cite).</para>
<para>A key aspect of hyper-reduction is that to get the most benefits out of it from a computational cost viewpoint, one has to implement it directly inside the FOM code. In practice, oversimplifying a bit, we can say that at its core, it involves enabling the FOM code to compute the FOM velocity at only a subset of the mesh. A few questions then arise: why should one risk investing the time in implementing such technique without assessing upfront whether it will work? how can one evaluate and compare different hyper-reduction techniques without modifying the FOM code?</para>
<para> <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-block m-success" /></para>
<para><simplesect kind="par"><title></title><para>pressio4py provides a variant of the Galerkin problem, called <emphasis>masked Galerkin</emphasis>, that allows one to test and compare the <emphasis>accuracy</emphasis> of various hyper-reduction techniques <bold>without</bold> having to change the FOM code.</para>
</simplesect>
 <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-block m-info" /></para>
<para><simplesect kind="par"><title></title><para>This tutorial shows how to construct a masked Galerkin problem using the most basic hyper-reduction technique, namely <emphasis>collocation</emphasis>.</para>
</simplesect>
</para>
</sect1>
<sect1 id="md_pages_tutorials_tutorial4_1autotoc_md76">
<title>Masked Galerkin with collocation</title>
<para>In practice, to use a <emphasis>masked</emphasis> Galerkin problem one needs:<orderedlist>
<listitem><para>a FOM object satisfying the API described <ulink url="file:///Users/fnrizzi/Desktop/work/ROM/gitrepos/pressio4py/docs/html/md_pages_prepare_your_app.html">here</ulink>: note that this is a regular FOM, nothing needs to change</para>
</listitem><listitem><para>a linear decoder (see <ulink url="./md_pages_tutorials_tutorial1.html">this tutorial</ulink>)</para>
</listitem><listitem><para>a masker object: the role of the ma </para>
</listitem></orderedlist>
</para>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
