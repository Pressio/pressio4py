<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="md_pages_components_rom_lspg_default_steady" kind="page">
    <compoundname>md_pages_components_rom_lspg_default_steady</compoundname>
    <title>rom: LSPG: steady problem</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para> <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-note m-default" /></para>
<para><parblock><para>Defined in module: <computeroutput>pressio4py.rom.lspg.steady</computeroutput></para>
<para>Import as: <emsp/> <emsp/> <emsp/> <computeroutput>from pressio4py.rom import lspg</computeroutput> </para>
</parblock></para>
<sect1 id="md_pages_components_rom_lspg_default_steady_1autotoc_md82">
<title>API</title>
<para><programlisting filename=".py"><codeline><highlight class="normal">problem<sp/>=<sp/>lspg.steady.Problem(fom_adapter,<sp/>decoder,<sp/>\<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rom_state,<sp/>fom_ref_state)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">problem<sp/>=<sp/>lspg.steady.PrecProblem(fom_adapter,<sp/>decoder,<sp/>rom_state,<sp/><sp/>(2)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fom_ref_state,<sp/>preconditioner)</highlight></codeline>
</programlisting></para>
<sect2 id="md_pages_components_rom_lspg_default_steady_1autotoc_md83">
<title>Parameters and Requirements</title>
<para><itemizedlist>
<listitem><para><computeroutput>fom_adapter</computeroutput>:<itemizedlist>
<listitem><para>instance of your adapter class specifying the FOM problem. <linebreak/>
</para>
</listitem><listitem><para>must satisfy the <ulink url="./md_pages_components_rom_fom_apis.html">steady API</ulink></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>decoder</computeroutput>:<itemizedlist>
<listitem><para>decoder object</para>
</listitem><listitem><para>must satify the requirements listed <ulink url="md_pages_components_rom_decoder.html">here</ulink></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>rom_state</computeroutput>:<itemizedlist>
<listitem><para>currently, must be a rank-1 <computeroutput>numpy.array</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>fom_ref_state</computeroutput>:<itemizedlist>
<listitem><para>your FOM reference state that is used when reconstructing the FOM state</para>
</listitem><listitem><para>must be a rank-1 <computeroutput>numpy.array</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>preconditioner</computeroutput>:<itemizedlist>
<listitem><para>an functor needed to precondition the ROM operators</para>
</listitem><listitem><para>must be a functor with a specific API: <programlisting filename=".py"><codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">Prec:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__call__(self,<sp/>fom_state,<sp/>operand):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>given<sp/>the<sp/>current<sp/>FOM<sp/>state,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>apply<sp/>your<sp/>preconditioner<sp/>to<sp/>the<sp/>operand.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Ensure<sp/>that<sp/>you<sp/>overwrite<sp/>the<sp/>data<sp/>in<sp/>the<sp/>operand.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>As<sp/>an<sp/>example,<sp/>a<sp/>trivial<sp/>preconditioner<sp/>that<sp/>does<sp/>nothing:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>operand[:]<sp/>*=<sp/>1.</highlight></codeline>
</programlisting></para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
<para><linebreak/>
 <hruler/>
 <linebreak/>
</para>
</sect2>
</sect1>
<sect1 id="md_pages_components_rom_lspg_default_steady_1autotoc_md84">
<title>Example code</title>
<para><programlisting filename=".py"><codeline><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>np</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>scipy<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>linalg</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>pressio4py<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>logger,<sp/>solvers,<sp/>rom</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>pressio4py.rom<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>lspg</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>===============================</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MySteadyAdapter:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self,<sp/>N):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>assert(N==6)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>self.N_<sp/>=<sp/>N</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">createResidual(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>np.zeros(self.N_)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">createApplyJacobianResult(self,<sp/>operand):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>np.zeros_like(operand)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">residual(self,<sp/>stateIn,<sp/>R):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>R[:]<sp/>=<sp/>1.0</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">applyJacobian(self,<sp/>stateIn,<sp/>operand,<sp/>C):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>J<sp/>=<sp/>self.jacobian(stateIn)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>C[:]<sp/><sp/>=<sp/>J.dot(operand)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">jacobian(self,<sp/>stateIn):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>np.identity(self.N_)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>===============================</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MyLinSolver:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">solve(self,<sp/>A,b,x):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>solve<sp/>Ax<sp/>=<sp/>b</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>here<sp/>we<sp/>should<sp/>solve<sp/>the<sp/>system,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>but<sp/>for<sp/>demonstration<sp/>let&apos;s<sp/>fix<sp/>the<sp/>solution</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>x[:]<sp/>=<sp/>np.array([1.,2.,3.])</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>===============================</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;__main__&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>logger.initialize(logger.logto.terminal)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>logger.setVerbosity([logger.loglevel.debug])</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>np.random.seed(334346892)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>N<sp/>=<sp/>6</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>appObj<sp/>=<sp/>MySteadyAdapter(N)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>yRef<sp/>=<sp/>np.ones(N)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>romSize<sp/>=<sp/>3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>phi<sp/>=<sp/>np.ones((meshSize,<sp/>romSize),<sp/>order=</highlight><highlight class="stringliteral">&apos;F&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>phi[:,0]<sp/>=<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>phi[:,1]<sp/>=<sp/>2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>phi[:,2]<sp/>=<sp/>3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>decoder<sp/>=<sp/>rom.Decoder(phi)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>yRom<sp/><sp/><sp/><sp/>=<sp/>np.zeros(romSize)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>problem<sp/>=<sp/>lspg.steady.Problem(appObj,<sp/>decoder,<sp/>yRom,<sp/>yRef)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>linear<sp/>and<sp/>non<sp/>linear<sp/>solver</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lsO<sp/><sp/>=<sp/>MyLinSolver()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>nlsO<sp/>=<sp/>solvers.create_gauss_newton(problem,<sp/>yRom,<sp/>lsO)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>nlsO.solve(problem,<sp/>yRom)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>print(yRom)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>fomRecon<sp/>=<sp/>problem.fomStateReconstructor()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>yFomFinal<sp/>=<sp/>fomRecon(yRom)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>print(yFomFinal)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>logger.finalize()</highlight></codeline>
</programlisting> </para>
</sect1>
    </detaileddescription>
    <location file="pages/components/rom_lspg_default_steady.md"/>
  </compounddef>
</doxygen>
